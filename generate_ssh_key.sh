#!/bin/bash

# =============================================================================
# SSH Key Generator for GitHub Actions Deployment
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä SSH-–∫–ª—é—á–µ–π –¥–ª—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ GitHub Actions
# =============================================================================

set -euo pipefail  # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]

–û–ø—Ü–∏–∏:
    -t, --type TYPE        –¢–∏–ø –∫–ª—é—á–∞ (rsa, ed25519, ecdsa) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ed25519]
    -b, --bits BITS        –†–∞–∑–º–µ—Ä –∫–ª—é—á–∞ (–¥–ª—è RSA: 2048, 4096; –¥–ª—è ECDSA: 256, 384, 521) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4096 –¥–ª—è RSA, 256 –¥–ª—è ECDSA]
    -f, --file FILENAME    –ò–º—è —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: id_ed25519 –∏–ª–∏ id_rsa]
    -c, --comment COMMENT  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–ª—é—á—É [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: deploy-key-YYYY-MM-DD]
    -p, --passphrase       –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–ª—é—á–∞
    -o, --output DIR       –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ~/.ssh]
    -f, --force           –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
    -g, --github-actions  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è GitHub Actions (–±–µ–∑ –ø–∞—Ä–æ–ª—è, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
    -v, --verbose         –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    -h, --help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    $0                                    # –°–æ–∑–¥–∞—Ç—å ed25519 –∫–ª—é—á –¥–ª—è GitHub Actions
    $0 -t rsa -b 4096                    # –°–æ–∑–¥–∞—Ç—å RSA 4096 –∫–ª—é—á
    $0 -t ed25519 -c "my-deploy-key"     # –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    $0 -g -o /tmp                        # –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–ª—è GitHub Actions –≤ /tmp

EOF
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    if ! command -v ssh-keygen &> /dev/null; then
        log_error "ssh-keygen –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ openssh-client"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–∞ –∫–ª—é—á–∞
validate_key_type() {
    local key_type=$1
    case $key_type in
        rsa|ed25519|ecdsa)
            return 0
            ;;
        *)
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–ª—é—á–∞: $key_type. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: rsa, ed25519, ecdsa"
            return 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–ª—é—á–∞
validate_key_bits() {
    local key_type=$1
    local bits=$2
    
    case $key_type in
        rsa)
            if [[ ! "$bits" =~ ^(2048|4096)$ ]]; then
                log_error "–î–ª—è RSA –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–º–µ—Ä—ã: 2048, 4096"
                return 1
            fi
            ;;
        ecdsa)
            if [[ ! "$bits" =~ ^(256|384|521)$ ]]; then
                log_error "–î–ª—è ECDSA –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–º–µ—Ä—ã: 256, 384, 521"
                return 1
            fi
            ;;
        ed25519)
            if [[ "$bits" != "256" ]]; then
                log_warning "–î–ª—è ed25519 —Ä–∞–∑–º–µ—Ä –≤—Å–µ–≥–¥–∞ 256 –±–∏—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä"
                bits=256
            fi
            ;;
    esac
    echo "$bits"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
get_default_filename() {
    local key_type=$1
    case $key_type in
        rsa) echo "id_rsa" ;;
        ed25519) echo "id_ed25519" ;;
        ecdsa) echo "id_ecdsa" ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SSH –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
create_ssh_directory() {
    local ssh_dir=$1
    if [[ ! -d "$ssh_dir" ]]; then
        mkdir -p "$ssh_dir"
        chmod 700 "$ssh_dir"
        log_success "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $ssh_dir"
    else
        log_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $ssh_dir"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
check_existing_key() {
    local key_path=$1
    local force=$2
    
    if [[ -f "$key_path" ]] && [[ "$force" != "true" ]]; then
        log_warning "–ö–ª—é—á $key_path —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
            exit 0
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
generate_key() {
    local key_type=$1
    local bits=$2
    local key_path=$3
    local comment=$4
    local passphrase=$5
    local verbose=$6
    
    local ssh_keygen_cmd="ssh-keygen -t $key_type"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª—é—á–∞ (–∫—Ä–æ–º–µ ed25519)
    if [[ "$key_type" != "ed25519" ]]; then
        ssh_keygen_cmd="$ssh_keygen_cmd -b $bits"
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    ssh_keygen_cmd="$ssh_keygen_cmd -f $key_path -C $comment"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏–ª–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
    if [[ "$passphrase" == "true" ]]; then
        log_info "–ë—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–ª—é—á–∞"
    else
        ssh_keygen_cmd="$ssh_keygen_cmd -N \"\""
    fi
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if [[ "$verbose" == "true" ]]; then
        log_info "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: $ssh_keygen_cmd"
    fi
    
    if eval "$ssh_keygen_cmd"; then
        log_success "SSH –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
set_permissions() {
    local key_path=$1
    chmod 600 "$key_path"
    chmod 644 "${key_path}.pub"
    log_success "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ
show_key_info() {
    local key_path=$1
    local key_type=$2
    local bits=$3
    
    echo
    echo "============================================================================="
    log_success "SSH –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
    echo "============================================================================="
    echo
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ:"
    echo "  ‚Ä¢ –¢–∏–ø: $key_type"
    echo "  ‚Ä¢ –†–∞–∑–º–µ—Ä: $bits –±–∏—Ç"
    echo "  ‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: $key_path"
    echo "  ‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ${key_path}.pub"
    echo
    echo "üîë –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞:"
    echo "============================================================================="
    cat "${key_path}.pub"
    echo "============================================================================="
    echo
    echo "üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GitHub Actions:"
    echo "  1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤—ã—à–µ"
    echo "  2. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Deploy Keys –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    echo "  3. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ GitHub Secrets –∫–∞–∫ SSH_PRIVATE_KEY"
    echo
    echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "  ‚Ä¢ GitHub Deploy Keys: https://github.com/USER/REPO/settings/keys"
    echo "  ‚Ä¢ GitHub Secrets: https://github.com/USER/REPO/settings/secrets/actions"
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
test_key() {
    local key_path=$1
    if ssh-keygen -l -f "$key_path" &>/dev/null; then
        log_success "–ö–ª—é—á –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É"
        if [[ "${VERBOSE:-false}" == "true" ]]; then
            ssh-keygen -l -f "$key_path"
        fi
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞"
        exit 1
    fi
}

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# =============================================================================

main() {
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    local KEY_TYPE="ed25519"
    local KEY_BITS="4096"
    local KEY_FILENAME=""
    local KEY_COMMENT=""
    local USE_PASSPHRASE=false
    local OUTPUT_DIR="$HOME/.ssh"
    local FORCE=false
    local GITHUB_ACTIONS=false
    local VERBOSE=false
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            -t|--type)
                KEY_TYPE="$2"
                shift 2
                ;;
            -b|--bits)
                KEY_BITS="$2"
                shift 2
                ;;
            -f|--file)
                KEY_FILENAME="$2"
                shift 2
                ;;
            -c|--comment)
                KEY_COMMENT="$2"
                shift 2
                ;;
            -p|--passphrase)
                USE_PASSPHRASE=true
                shift
                ;;
            -o|--output)
                OUTPUT_DIR="$2"
                shift 2
                ;;
            --force)
                FORCE=true
                shift
                ;;
            -g|--github-actions)
                GITHUB_ACTIONS=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies
    
    if ! validate_key_type "$KEY_TYPE"; then
        exit 1
    fi
    
    KEY_BITS=$(validate_key_bits "$KEY_TYPE" "$KEY_BITS")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if [[ -z "$KEY_FILENAME" ]]; then
        KEY_FILENAME=$(get_default_filename "$KEY_TYPE")
    fi
    
    if [[ -z "$KEY_COMMENT" ]]; then
        if [[ "$GITHUB_ACTIONS" == "true" ]]; then
            KEY_COMMENT="github-actions-deploy-$(date +%F)"
        else
            KEY_COMMENT="deploy-key-$(date +%F)"
        fi
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_ssh_directory "$OUTPUT_DIR"
    
    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∫–ª—é—á—É
    local KEY_PATH="$OUTPUT_DIR/$KEY_FILENAME"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    check_existing_key "$KEY_PATH" "$FORCE"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–∞ —Ç–∏–ø–∞ $KEY_TYPE ($KEY_BITS –±–∏—Ç)..."
    generate_key "$KEY_TYPE" "$KEY_BITS" "$KEY_PATH" "$KEY_COMMENT" "$USE_PASSPHRASE" "$VERBOSE"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    set_permissions "$KEY_PATH"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    test_key "$KEY_PATH"
    
    # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    show_key_info "$KEY_PATH" "$KEY_TYPE" "$KEY_BITS"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
